[[!meta title="Copying a GnuBee's root partition onto a new drive"]]
[[!meta date="2020-10-24T16:30:00.000-07:00"]]
[[!meta license="[Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/)"]]

Here is the process I followed when I moved my GnuBee's root partition from
one flaky Kingston SSD drive to a brand new Samsung SSD.

It was relatively straightforward, but there are two key points:

1. Make sure you label the root partition `GNUBEE-ROOT`.
2. Make sure you copy the network configuration from the SSD, not the
   `tmpfs` mount.

# Copy the partition table

First, with both drives plugged in, I replicated the partition table of the
first drive (`/dev/sda`):

    # fdisk -l /dev/sda
    Disk /dev/sda: 111.8 GiB, 120034123776 bytes, 234441648 sectors
    Disk model: KINGSTON SA400S3
    Units: sectors of 1 * 512 = 512 bytes
    Sector size (logical/physical): 512 bytes / 512 bytes
    I/O size (minimum/optimal): 512 bytes / 512 bytes
    Disklabel type: gpt
    Disk identifier: 799CD830-526B-42CE-8EE7-8C94EF098D46
    
    Device       Start       End   Sectors   Size Type
    /dev/sda1     2048   8390655   8388608     4G Linux swap
    /dev/sda2  8390656 234441614 226050959 107.8G Linux filesystem

onto the second drive (`/dev/sde`):

    # fdisk /dev/sde
    
    Welcome to fdisk (util-linux 2.33.1).
    Changes will remain in memory only, until you decide to write them.
    Be careful before using the write command.
    
    Device does not contain a recognized partition table.
    Created a new DOS disklabel with disk identifier 0xd011eaba.
    
    Command (m for help): g
    Created a new GPT disklabel (GUID: 83F70325-5BE0-034E-A9E1-1965FEFD8E9F).
    
    Command (m for help): n
    Partition number (1-128, default 1): 
    First sector (2048-488397134, default 2048): 
    Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-488397134, default 488397134): +4G
    
    Created a new partition 1 of type 'Linux filesystem' and of size 4 GiB.
    
    Command (m for help): t
    Selected partition 1
    Partition type (type L to list all types): 19
    Changed type of partition 'Linux filesystem' to 'Linux swap'.
    
    Command (m for help): n
    Partition number (2-128, default 2): 
    First sector (8390656-488397134, default 8390656): 
    Last sector, +/-sectors or +/-size{K,M,G,T,P} (8390656-488397134, default 488397134): 234441614
    
    Created a new partition 2 of type 'Linux filesystem' and of size 107.8 GiB.
    
    Command (m for help): p
    Disk /dev/sde: 232.9 GiB, 250059350016 bytes, 488397168 sectors
    Disk model: Samsung SSD 860 
    Units: sectors of 1 * 512 = 512 bytes
    Sector size (logical/physical): 512 bytes / 512 bytes
    I/O size (minimum/optimal): 512 bytes / 512 bytes
    Disklabel type: gpt
    Disk identifier: 83F70325-5BE0-034E-A9E1-1965FEFD8E9F
    
    Device       Start       End   Sectors   Size Type
    /dev/sde1     2048   8390655   8388608     4G Linux swap
    /dev/sde2  8390656 234441614 226050959 107.8G Linux filesystem
    
    Command (m for help): w
    The partition table has been altered.
    Calling ioctl() to re-read partition table.
    Syncing disks.

I wasted a large amount of space on the second drive, but that was on
purpose in case I decide to later on move to a
[RAID-1](https://en.wikipedia.org/wiki/Standard_RAID_levels#RAID_1) root
partition with the Kingston SSD.

# Format the partitions

Second, I formated the new partitions:

    # mkswap /dev/sde1 
    Setting up swapspace version 1, size = 4 GiB (4294963200 bytes)
    no label, UUID=7a85fbce-2493-45c1-a548-4ec6e827ec29

    # mkfs.ext4 /dev/sde2 
    mke2fs 1.44.5 (15-Dec-2018)
    Discarding device blocks: done                            
    Creating filesystem with 28256369 4k blocks and 7069696 inodes
    Filesystem UUID: 732a76df-d369-4e7b-857a-dd55fd461bbc
    Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
        4096000, 7962624, 11239424, 20480000, 23887872
    
    Allocating group tables: done                            
    Writing inode tables: done                            
    Creating journal (131072 blocks): done
    Writing superblocks and filesystem accounting information: done   

and labeled the root partition so that the GnuBee can pick it up as it boots
up:

    e2label /dev/sde2 GNUBEE-ROOT

since `GNUBEE-ROOT` is what [`uboot` will be looking
for](http://gnubee.org/background_info.html#using-debian-or-openmediavault).

# Copy the data over

Finally, I copied the data over from the original drive to the new one:

    # umount /etc/network
    # mkdir /mnt/root
    # mount /dev/sde2 /mnt/root
    # rsync -aHx --delete --exclude=/dev/* --exclude=/proc/* --exclude=/sys/* --exclude=/tmp/* --exclude=/mnt/* --exclude=/lost+found/* --exclude=/media/* --exclude=/rom/* /* /mnt/root/
    # sync

Note that if you don't unmount `/etc/network/`, you'll be copying the
override provided at boot time instead of the underlying config that's on
the root partition. The reason that this matters is that the [script that
renames the network interfaces to `ethblack` and
`ethblue`](https://github.com/neilbrown/gnubee-tools/blob/64e98ce8352d799b22967bbd2681f325e683b70d/initramfs/init#L77-L88)
expects specific files in order to produce a working network configuration.
If you copy the final *modified* config files then you end up with an
bind-mounted empty directory as `/etc/network`, and the network interfaces
can't be brought up successfully.

[[!tag gnubee]]
